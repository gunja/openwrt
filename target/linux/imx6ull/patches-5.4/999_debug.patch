Index: linux-5.4.168/Makefile
===================================================================
--- linux-5.4.168.orig/Makefile
+++ linux-5.4.168/Makefile
@@ -718,6 +718,10 @@ KBUILD_CFLAGS	+= $(call cc-disable-warni
 KBUILD_CFLAGS	+= $(call cc-disable-warning, format-overflow)
 KBUILD_CFLAGS	+= $(call cc-disable-warning, address-of-packed-member)
 
+ifdef CONFIG_CC_OPTIMIZE_FOR_DEBUGGING
+KBUILD_CFLAGS += -Og
+KBUILD_CFLAGS += $(call cc-disable-warning,maybe-uninitialized,)
+else
 ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
 KBUILD_CFLAGS += -O2 $(EXTRA_OPTIMIZATION)
 else ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
@@ -725,6 +729,7 @@ KBUILD_CFLAGS += -O3 $(EXTRA_OPTIMIZATIO
 else ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE
 KBUILD_CFLAGS += -Os -fno-reorder-blocks -fno-tree-ch $(EXTRA_OPTIMIZATION)
 endif
+endif
 
 # Tell gcc to never replace conditional load with a non-conditional one
 KBUILD_CFLAGS	+= $(call cc-option,--param=allow-store-data-races=0)
Index: linux-5.4.168/include/asm-generic/fixmap.h
===================================================================
--- linux-5.4.168.orig/include/asm-generic/fixmap.h
+++ linux-5.4.168/include/asm-generic/fixmap.h
@@ -29,7 +29,9 @@
  */
 static __always_inline unsigned long fix_to_virt(const unsigned int idx)
 {
+#ifndef CONFIG_CC_OPTIMIZE_FOR_DEBUGGING
 	BUILD_BUG_ON(idx >= __end_of_fixed_addresses);
+#endif
 	return __fix_to_virt(idx);
 }
 
Index: linux-5.4.168/include/linux/compiler-gcc.h
===================================================================
--- linux-5.4.168.orig/include/linux/compiler-gcc.h
+++ linux-5.4.168/include/linux/compiler-gcc.h
@@ -59,8 +59,10 @@
 
 #define __compiletime_object_size(obj) __builtin_object_size(obj, 0)
 
+#if !defined(CONFIG_CC_OPTIMIZE_FOR_DEBUGGING)
 #define __compiletime_warning(message) __attribute__((__warning__(message)))
 #define __compiletime_error(message) __attribute__((__error__(message)))
+#endif
 
 #if defined(LATENT_ENTROPY_PLUGIN) && !defined(__CHECKER__)
 #define __latent_entropy __attribute__((latent_entropy))
Index: linux-5.4.168/init/Kconfig
===================================================================
--- linux-5.4.168.orig/init/Kconfig
+++ linux-5.4.168/init/Kconfig
@@ -1223,6 +1223,26 @@ config CC_OPTIMIZE_FOR_SIZE
 	  Choosing this option will pass "-Os" to your compiler resulting
 	  in a smaller kernel.
 
+config CC_OPTIMIZE_FOR_DEBUGGING
+	bool "Optimize for better debugging experience (-Og)"
+	#depends on $(cc-option,-Og)
+	select NO_AUTO_INLINE
+	help
+	  This will apply GCC '-Og' optimization level which is supported
+	  since GCC 4.8. This optimization level offers a reasonable level
+	  of optimization while maintaining fast compilation and a good
+	  debugging experience. It is similar to '-O1' while preferring to
+	  keep debug ability over runtime speed. The overall performance
+	  will drop a bit (~6%).
+
+	  Use only if you want to debug the kernel, especially if you want
+	  to have better kernel debugging experience with gdb facilities
+	  like kgdb or qemu. If enabling this option breaks your kernel,
+	  you should either disable this or find a fix (mostly in the arch
+	  code).
+
+	  If unsure, select N.
+
 endchoice
 
 config HAVE_LD_DEAD_CODE_DATA_ELIMINATION
Index: linux-5.4.168/kernel/configs/tiny.config
===================================================================
--- linux-5.4.168.orig/kernel/configs/tiny.config
+++ linux-5.4.168/kernel/configs/tiny.config
@@ -1,5 +1,6 @@
 # CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE is not set
 CONFIG_CC_OPTIMIZE_FOR_SIZE=y
+# CONFIG_CC_OPTIMIZE_FOR_DEBUGGING is not set
 # CONFIG_KERNEL_GZIP is not set
 # CONFIG_KERNEL_BZIP2 is not set
 # CONFIG_KERNEL_LZMA is not set
