Index: linux-4.14.199/drivers/mtd/devices/m25p80.c
===================================================================
--- linux-4.14.199.orig/drivers/mtd/devices/m25p80.c
+++ linux-4.14.199/drivers/mtd/devices/m25p80.c
@@ -19,6 +19,7 @@
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/device.h>
+#include <linux/reboot.h>
 
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/partitions.h>
@@ -226,6 +227,32 @@ static ssize_t m25p80_read(struct spi_no
 	return ret;
 }
 
+static int m25p_reboot(struct notifier_block *nb, unsigned long val, void *v)
+{
+	struct mtd_info *mtd;
+	struct spi_nor *sp;
+	struct m25p *flash;
+	u8 code;
+	int rc;
+
+	mtd = container_of(nb, struct mtd_info, reboot_notifier);
+	sp = container_of(mtd, struct spi_nor, mtd);
+	flash = container_of(sp, struct m25p, spi_nor);
+
+	printk("m25p_reboot JEDEC\n");
+
+	code = 0x66; // OPCODE_RESET_ENABLE
+	rc = spi_write_then_read(flash->spi, &code, 1, NULL, 0);
+	printk("m25p reset enable = %d\n", rc);
+
+	code = 0x99; // OPCODE_RESET_MEMORY
+	rc = spi_write_then_read(flash->spi, &code, 1, NULL, 0);
+	printk("m25p reset memory = %d\n", rc);
+
+	return NOTIFY_DONE;
+}
+
+
 /*
  * board specific setup should have ensured the SPI clock used here
  * matches what the READ command supports, at least until this driver
@@ -243,6 +270,7 @@ static int m25p_probe(struct spi_device
 	};
 	char *flash_name;
 	int ret;
+	int rc;
 
 	data = dev_get_platdata(&spi->dev);
 
@@ -265,6 +293,8 @@ static int m25p_probe(struct spi_device
 	spi_set_drvdata(spi, flash);
 	flash->spi = spi;
 
+	nor->mtd.reboot_notifier.notifier_call = m25p_reboot;
+
 	if (spi->mode & SPI_RX_QUAD) {
 		hwcaps.mask |= SNOR_HWCAPS_READ_1_1_4;
 
@@ -298,8 +328,12 @@ static int m25p_probe(struct spi_device
 	if (ret)
 		return ret;
 
-	return mtd_device_register(&nor->mtd, data ? data->parts : NULL,
+	rc = mtd_device_register(&nor->mtd, data ? data->parts : NULL,
 				   data ? data->nr_parts : 0);
+
+	register_reboot_notifier(&nor->mtd.reboot_notifier);
+
+	return rc;
 }
 
 
